#!/bin/bash

if [ -n "$DEBUG" ]; then
    PS4=':${LINENO}+'
    set -x
fi

# src: https://stackoverflow.com/a/28776166
sourced=0
if [ -n "$ZSH_EVAL_CONTEXT" ]; then
    case $ZSH_EVAL_CONTEXT in *:file) sourced=1;; esac
elif [ -n "$KSH_VERSION" ]; then
    [ "$(cd $(dirname -- $0) && pwd -P)/$(basename -- $0)" != "$(cd $(dirname -- ${.sh.file}) && pwd -P)/$(basename -- ${.sh.file})" ] && sourced=1
elif [ -n "$BASH_VERSION" ]; then
    (return 0 2>/dev/null) && sourced=1
else # All other shells: examine $0 for known shell binary filenames
    # Detects `sh` and `dash`; add additional shell filenames as needed.
    case ${0##*/} in sh|dash) sourced=1;; esac
fi

# A2N: account ->number hash
# this bit of inline python3 fetches the json file,
# loads it and then echos the shell declaration for
# an associative array named A2N
function _mawsh_declare_a2n() {
    python3 <<EOF
import json
import requests

url = 'https://mozilla-it.github.io/itsre-accounts/accounts.json'
result = requests.get(url)
assert result.status_code == 200
a2n = json.loads(result.content)
body = ' '.join([f'[{p}]={a}' for p,a in a2n.items()])
print(f'declare -A A2N=( {body} )')
EOF
}
eval $(_mawsh_declare_a2n)

function _mawsh_a2n_keys() {
    keys=""
    if [ -n "$ZSH_EVAL_CONTEXT" ]; then
        sorted=$(printf "%s\n" ${(ko)A2N[@]})
    elif [ -n "$KSH_VERSION" ] || [ -n "$BASH_VERSION" ]; then
        read -a unsorted <<< ${!A2N[@]}
        readarray -t sorted < <(printf '%s\0' "${unsorted[@]}" | sort -z | xargs -0n1)
    else
        echo "!error"
    fi
    echo "${sorted[@]}"
}

function _mawsh_usage() {
    cat <<EOF
usage: $(basename $0) [-h] [-a <action>] [-r <role-suffix>] account
EOF
    return 1
}

function _mawsh_help() {
    accounts=""
    for account in $(_mawsh_a2n_keys); do
        accounts+=$'\n'" - $account"
    done
    cat <<EOF
usage: $(basename $0) [-h] [-a <action>] [-r <role-suffix>] account

accounts: ${accounts}

positional:
    account             one of the valid accounts listed above

optional:
  -a|--action           [exec|login|role-arn]
                        default="exec"; action to perform
  -r|--role-suffix      [admin|poweruser|readonly|viewonly]
                        default="admin"; choose the rule suffix
  -h|--help             show this help message and exit

EOF
    return 1
}

function _mawsh_main() {
	if ! hash maws 2>/dev/null; then
		echo "install maws"
	fi
    # STUPID! can't doe ACTIONS[0] because bash (0) and zsh (1) index differently
    ACTIONS=("exec" "login" "role-arn"); action="exec"
    ROLE_SUFFIXES=("admin" "poweruser" "readonly" "viewonly"); role_suffix="admin"
    exitcode=0
    while [[ $# -gt 0 ]]; do
        arg="${1}"
        case $arg in
        (-a|--action)
            if [[ " ${ACTIONS[@]} " =~ " ${2} " ]]; then
                action="${2}"
                shift
                shift
            else
                _mawsh_usage
                exitcode=$?
                break
            fi
            ;;
        (-r|--role-suffix)
            if [[ " ${ROLE_SUFFIXES[@]} " =~ " ${2} " ]]; then
                role_suffix="${2}"
                shift
                shift
            else
                _mawsh_usage
                exitcode=$?
                break
            fi
            ;;
        (-k|--kubeconfig)
            kubeconfig="${2}"
            shift
            shift
            ;;
        (-h|--help)
            _mawsh_help
            exitcode=$?
            break
            ;;
        (*)
            number=${A2N[$1]}
            if [[ -n "$number" ]]; then
                account="${1}"
                shift
                break
            else
                _mawsh_usage
                exitcode=$?
                break
            fi
            ;;
        esac
    done

    if [ $exitcode -eq 0 ]; then
        role_arn="arn:aws:iam::${number}:role/maws-${role_suffix}"
        case "$action" in
        (exec)
            export AWS_DEFAULT_REGION=us-west-2
            if [[ -z "$AWS_SESSION_EXPIRATION" || $AWS_SESSION_EXPIRATION -lt $(date +%s) ]]; then
                echo "session expired"
                result=$(maws --role-arn $role_arn)
                tmpfile=${result//* }
                for pair in $(cat $tmpfile | grep export | grep AWS | sed 's|export ||'); do
                    export $pair
                done
            else
                echo "using existing session"
            fi
            if [ -n "$1" ]; then
                $@
            fi
           ;;
        (login)
            echo "login $account $role_suffix $role_arn"
            maws -w --role-arn $role_arn
            ;;
        (role-arn)
            echo $role_arn
            ;;
        (*)
            _mawsh_usage
            exitcode=$?
            ;;
        esac
    fi
}

if [[ $sourced -eq 0 ]]; then
	_mawsh_main "$@"
fi
